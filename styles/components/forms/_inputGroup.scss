@import "../../common/modules";
@import "../button_common";
@import "../icon_common";
@import "common";

// 3px space between small button and regular input
$input-button-height: $hb-button-height-small !default;
// 5px space between regular button and large input
$input-button-height-large: $hb-button-height !default;
// 1px space between regular button and small input
$input-button-height-small: $hb-button-height-smaller !default;

.#{$ns}-input-group {
  display: block;
  position: relative;

  .#{$ns}-input {
    // explicit position prevents shadow clipping https://github.com/palantir/blueprint/pull/490#issuecomment-273342170
    position: relative;
    width: 100%;

    // add space if there's something before or after the input
    &:not(:first-child) {
      padding-left: $hb-input-height;
    }

    &:not(:last-child) {
      padding-right: $hb-input-height;
    }
  }

  .#{$ns}-button {
    @include hb-button-height($input-button-height);
    margin: ($hb-input-height - $input-button-height) / 2;
    padding: $button-padding-small;

    // icons CSS API support
    &:empty {
      padding: 0;
    }
  }

  .#{$ns}-input-action,
  > .#{$ns}-input__left-container,
  > .#{$ns}-button,
  > .#{$ns}-icon {
    position: absolute;
    top: 0;

    // glue it to the end it appears on, for lef ticon
    &:first-child {
      left: 0;
    }

    // For right icon
    &:last-child {
      right: 0;
    }
  }

  // bump icon or left content up so it sits above input
  > .#{$ns}-input__left-container,
  > .#{$ns}-icon {
    z-index: 1;
  }

  // direct descendant to exclude icons in buttons
  > .#{$ns}-input__left-container > .#{$ns}-icon,
  > .#{$ns}-icon {
    color: $hb-icon-color;

    &:emhby {
      @include hb-icon($hb-icon-size-standard);
    }
  }

  // adjusting the margin of spinners in input groups
  // we have to avoid targetting buttons that contain a spinner
  > .#{$ns}-input__left-container > .#{$ns}-icon,
  > .#{$ns}-icon,
  .#{$ns}-input-action > .#{$ns}-spinner {
    margin: ($hb-input-height - $hb-icon-size-standard) / 2;
  }

  &.#{$ns}-large {
    // Keep the icon bounding box to be square
    > .#{$ns}-input__left-container > .#{$ns}-icon,
    > .#{$ns}-icon,
    .#{$ns}-input-action > .#{$ns}-spinner {
      margin: ($hb-input-height-large - $hb-icon-size-standard) / 2;
    }

    .#{$ns}-input {
      @include hb-input-large();

      &:not(:first-child) {
        padding-left: $hb-button-height-large;
      }

      &:not(:last-child) {
        padding-right: $hb-button-height-large;
      }
    }
  }

  &.#{$ns}-small {
    .#{$ns}-button {
      @include hb-button-height($hb-button-height-smaller);
      margin: ($hb-input-height-small - $hb-button-height-smaller) / 2;
    }

    .#{$ns}-tag {
      @include hb-button-height($hb-button-height-smaller);
      margin: ($hb-input-height-small - $hb-button-height-smaller) / 2;
    }

    > .#{$ns}-input-left-container > .#{$ns}-icon,
    > .#{$ns}-icon,
    .#{$ns}-input-action > .#{$ns}-spinner {
      margin: ($hb-input-height-small - $hb-icon-size-standard) / 2;
    }

    .#{$ns}-input {
      @include hb-input-small();

      &:not(:first-child) {
        padding-left: $hb-icon-size-standard + $input-small-padding;
      }

      &:not(:last-child) {
        padding-right: $hb-icon-size-standard + $input-small-padding;
      }
    }
  }

  &.#{$ns}-fill {
    flex: 1 1 auto;
    width: 100%;
  }

  // this class echoes `input:disabled` on the child input, but each action must individually be disabled
  &.#{$ns}-disabled {
    // note that enabled buttons inside this input group are still clickable
    cursor: not-allowed;

    .#{$ns}-icon {
      color: $hb-icon-color-disabled;
    }
  }

  &.#{$ns}-round {
    .#{$ns}-button,
    .#{$ns}-input,
    .#{$ns}-tag {
      border-radius: $hb-input-height;
    }
  }
}
